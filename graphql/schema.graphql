schema @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable"]) {
  query: Query
  mutation: Mutation
}

enum AssigneeType {
  USER
  PROJECT_MEMBER
  PROJECT_GROUP
}

input CommentFilters {
  id: FilterOptions = null
  added: FilterOptions = null
  text: FilterOptions = null
}

input CommitFilters {
  id: FilterOptions = null
  shortId: FilterOptions = null
  added: FilterOptions = null
}

"""Date (isoformat)"""
scalar Date

"""Date with time (isoformat)"""
scalar DateTime

input FilterOptions {
  equal: String = null
  contains: String = null
  startsWith: String = null
  endsWith: String = null
  isEmpty: Boolean = null
  isNotEmpty: Boolean = null
  isAnyOf: [String!] = null
}

input GraphQLAssignee {
  id: String!
  type: AssigneeType!
}

type GraphQLComment @key(fields: "id") {
  id: ID!
  added: DateTime!
  text: String!
  authorId: String! @shareable
  task: GraphQLTask!
}

type GraphQLCommit {
  id: String!
  added: Date!
  parentId: String
  repositoryId: String!
  authorId: String
  reportingSchemaId: String!
  schemaCategories: [GraphQLSchemaCategory!]
  schemaElements: [GraphQLSchemaElement!]
  tasks: [GraphQLTask!]
  tags: [GraphQLTag!]
  shortId: String!
}

type GraphQLProjectMember @key(fields: "id") {
  id: ID!
  email: String! @shareable
  userId: String! @shareable
}

type GraphQLProjectSource @key(fields: "id") {
  id: ID!
  type: ProjectSourceType!
  dataId: String!
  name: String!
  projectId: String! @shareable
  metaFields: JSON!
  interpretation: JSON!
  authorId: String! @shareable
  updated: DateTime!
  elements: [GraphQLSchemaElement!]
  fileUrl: String
  data: GraphQLSourceFile
}

type GraphQLReportingCreationSchema {
  id: String!
  name: String!
  projectId: String
}

type GraphQLReportingSchema {
  id: String!
  name: String!
  categories: [GraphQLSchemaCategory!]
  projectId: String!
  templateId: String
}

type GraphQLSchemaCategory {
  id: String!
  name: String!
  description: String
  reportingSchemaId: String
  path: String!
  reportingSchema: GraphQLReportingSchema!
  elements: [GraphQLSchemaElement!]
  commits: [GraphQLCommit!]
  depth: Int!
}

type GraphQLSchemaElement {
  id: String!
  name: String!
  quantity: Float!
  unit: Unit!
  description: String
  schemaCategory: GraphQLSchemaCategory!
  commits: [GraphQLCommit!]!
  source: GraphQLProjectSource
  result: JSON
}

union GraphQLSchemaElementGraphQLSchemaCategory = GraphQLSchemaElement | GraphQLSchemaCategory

type GraphQLSchemaTemplate {
  id: String!
  name: String!
  schema: GraphQLReportingSchema
}

type GraphQLSourceFile {
  headers: [String!]!
  rows: JSON!
}

type GraphQLTag {
  added: Date!
  authorId: String!
  commitId: String!
  commit: GraphQLCommit!
  id: String!
  name: String!
  shortId: String!
}

type GraphQLTask @key(fields: "id") {
  id: ID!
  name: String!
  description: String!
  dueDate: Date!
  authorId: String! @shareable
  status: TaskStatus!
  comments: [GraphQLComment!]
  commits: [GraphQLCommit!]!
  reportingSchema: GraphQLReportingSchema!
  reportingSchemaId: String! @shareable
  assigneeId: String @shareable
  assignedGroupId: String @shareable
  item: GraphQLSchemaElementGraphQLSchemaCategory!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Add a Schema Template"""
  addSchemaTemplate(name: String!): GraphQLSchemaTemplate!

  """Update a Schema Template"""
  updateSchemaTemplate(id: String!, name: String = null): GraphQLSchemaTemplate!

  """Delete a Schema Template"""
  deleteSchemaTemplate(id: String!): String!

  """
  Add a Reporting Schema to a project.
  Concurrently updates the Schema Template to
  hold the Reporting Schema.
  """
  addReportingSchema(templateId: String!, projectId: String!, name: String = null): GraphQLReportingCreationSchema!

  """
  Add a Reporting Schema to a project.
  Concurrently updates the Schema Template to
  hold the Reporting Schema.
  """
  addReportingSchemaFromTemplate(templateId: String!, projectId: String!, name: String): GraphQLReportingCreationSchema!

  """Update a Reporting Schema"""
  updateReportingSchema(id: String!, name: String = null, projectId: String = null): GraphQLReportingSchema!

  """Delete a Reporting Schema"""
  deleteReportingSchema(id: String!): String!

  """Add a Schema Category to a Reporting Schema"""
  addSchemaCategory(reportingSchemaId: String!, name: String = null, path: String = null, description: String = null): GraphQLSchemaCategory!

  """Update a Schema Category"""
  updateSchemaCategory(id: String!, name: String = null, path: String = null, description: String = null): GraphQLSchemaCategory!

  """Delete a Schema Category"""
  deleteSchemaCategory(id: String!): String!

  """Add a Schema Element to a Schema Category"""
  addSchemaElement(schemaCategoryId: String!, name: String!, quantity: Float!, unit: Unit!, description: String!): GraphQLSchemaElement!

  """Add a Schema Element to a Schema Category"""
  addSchemaElementFromSource(schemaCategoryId: String!, sourceId: String!, objectIds: [String!]!, units: [Unit!] = null, quantities: [String!] = null): [GraphQLSchemaElement!]!

  """Update a Schema Element"""
  updateSchemaElement(id: String!, name: String = null, schemaCategoryId: String = null, quantity: Float = null, unit: Unit = null, description: String = null, result: JSON = null): GraphQLSchemaElement!

  """Delete a Schema Element"""
  deleteSchemaElement(id: String!): String!

  """Add a Project Source"""
  addProjectSource(projectId: String!, type: ProjectSourceType!, name: String!, dataId: String = null, speckleUrl: String = null, file: String = null): GraphQLProjectSource!

  """Update a Project Source"""
  updateProjectSource(id: String!, type: ProjectSourceType = null, dataId: String = null, name: String = null, file: String = null, metaFields: JSON = null, interpretation: JSON = null, speckleUrl: String = null): GraphQLProjectSource!

  """Delete a project source"""
  deleteProjectSource(id: String!): String!

  """Add a Task to a Reporting Schema"""
  addTask(reportingSchemaId: String!, name: String!, dueDate: Date!, item: taskItem!, description: String!, status: TaskStatus!, assignee: GraphQLAssignee = null): GraphQLTask!

  """Update a Task"""
  updateTask(id: String!, name: String = null, dueDate: Date = null, item: taskItem = null, description: String = null, status: TaskStatus = null, assignee: GraphQLAssignee = null, assignedGroupId: String = null): GraphQLTask!

  """Delete a Task"""
  deleteTask(id: String!): String!

  """Add a comment to a task"""
  addComment(taskId: String!, text: String!): GraphQLComment!

  """Update a task comment"""
  updateComment(id: String!, text: String!): GraphQLComment!

  """Delete a comment"""
  deleteComment(id: String!): String!

  """Add a new tag."""
  createTag(name: String!, commitId: String!): GraphQLTag!

  """Change the name of the tag or move it to a different commit."""
  updateTag(id: String!, name: String = null, commitId: String = null): GraphQLTag!

  """Delete a tag"""
  deleteTag(id: String!): String!
}

input ProjectSourceFilters {
  name: FilterOptions = null
  projectId: FilterOptions = null
  id: FilterOptions = null
}

enum ProjectSourceType {
  CSV
  SPECKLE
  XSLX
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """Get all sources associated with a project"""
  projectSources(projectId: String!, filters: ProjectSourceFilters = null): [GraphQLProjectSource!]!

  """Query Schema Templates"""
  schemaTemplates(filters: SchemaTemplateFilters = null): [GraphQLSchemaTemplate!]!

  """Query a reporting schema using project_id"""
  reportingSchemas(projectId: String!, filters: ReportingSchemaFilters = null): [GraphQLReportingSchema!]!

  """Get all Schema Categories of a Reporting Schema"""
  schemaCategories(reportingSchemaId: String!, commitId: String = null, filters: SchemaCategoryFilters = null): [GraphQLSchemaCategory!]!

  """Get all schema elements for a list of categories"""
  schemaElements(schemaCategoryIds: [String!]!, commitId: String = null, filters: SchemaElementFilters = null): [GraphQLSchemaElement!]!

  """Get all commits of a Reporting Schema"""
  commits(reportingSchemaId: String!, filters: CommitFilters = null): [GraphQLCommit!]!

  """Get all tags"""
  tags(reportingSchemaId: String!, filters: TagFilters = null): [GraphQLTag!]!

  """Get all tasks connected to a reporting schema"""
  tasks(reportingSchemaId: String!, commitId: String = null, filters: TaskFilters = null): [GraphQLTask!]!

  """Query all comments of a task"""
  comments(taskId: String!, filters: CommentFilters = null): [GraphQLComment!]!

  """
  Resolver for exporting the database contents as a base64 encoded string.
  """
  exportReportingSchema(reportingSchemaId: String!, exportFormat: exportFormat!): String!
}

input ReportingSchemaFilters {
  name: FilterOptions = null
  id: FilterOptions = null
  projectId: FilterOptions = null
}

input SchemaCategoryFilters {
  name: FilterOptions = null
  id: FilterOptions = null
  description: FilterOptions = null
}

input SchemaElementFilters {
  id: FilterOptions = null
  name: FilterOptions = null
  classification: FilterOptions = null
  subclassification: FilterOptions = null
  quantity: FilterOptions = null
  unit: FilterOptions = null
  description: FilterOptions = null
}

input SchemaTemplateFilters {
  name: FilterOptions = null
  id: FilterOptions = null
}

input TagFilters {
  id: FilterOptions = null
  shortId: FilterOptions = null
  added: FilterOptions = null
  authorId: FilterOptions = null
}

input TaskFilters {
  id: FilterOptions = null
  description: FilterOptions = null
  dueDate: FilterOptions = null
  name: FilterOptions = null
  itemId: FilterOptions = null
  itemType: FilterOptions = null
}

enum TaskItemType {
  Category
  Element
}

enum TaskStatus {
  PENDING
  COMPLETED
  APPROVED
}

enum Unit {
  M
  M2
  M3
  KG
  PCS
  NONE
}

scalar _Any

union _Entity = GraphQLProjectMember | GraphQLProjectSource | GraphQLTask | GraphQLComment

type _Service {
  sdl: String!
}

enum exportFormat {
  LCABYG
  CSV
}

input taskItem {
  id: String!
  type: TaskItemType!
}
